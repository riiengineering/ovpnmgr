#dnl -*- mode: shell-script; indent-tabs-mode: t -*-
#dnl
#dnl This module contains functions to generate config tar balls.
#dnl
#ifndef _HAVE_CONFIG_PACKAGE_IN
#define _HAVE_CONFIG_PACKAGE_IN
#include base.in
#ifbool USE_MAIL_CONFIG
#include mail.in
#endif
#ifbool !USE_CONFIG_TBLK
#if test "${USE_CONFIG_OVPN}" != flat && test "${USE_CONFIG_OVPN}" != dir
#warning no config file formats are enabled. This doesn’t make any sense!
#endif
#endif

require_command mktemp

CLIENT_CONFIG_SKEL="${CONFDIR:?}/client.conf.d"
MAILLOG_DATE_FMT='%Y-%m-%dT%H:%M:%S'

ensure_package_dir() {
	test -d "${package_dir}" || mkdir -p "${package_dir}"
}

require_client_conf_d() {
	test -d "${CLIENT_CONFIG_SKEL:?}" || {
		fail "${CLIENT_CONFIG_SKEL:-client.conf.d} directory is missing"
	}
	test -e "${CLIENT_CONFIG_SKEL:?}/config.ovpn" || {
		fail "${CLIENT_CONFIG_SKEL:-client.conf.d}/config.ovpn is missing"
	}
}

user_package_path() {
	echo "${package_dir:?}/${1:?no username given}"
	test -d "${package_dir:?}/${1:?}"  # return value
}

prepare_client_config_dir() {
	# usage: prepare_client_config_dir username dest-dir
	#
	# copies all required client config files for $username to $dest-dir

	__prepare_ccd_username=${1:?no username given}
	__prepare_ccd_destdir=${2:?no destination directory given}

	test -d "${__prepare_ccd_destdir}" || return %{EFAIL}

	# copy files from skeleton directory
	cp -L -R "${CLIENT_CONFIG_SKEL:?}"/* "${__prepare_ccd_destdir}"/

	# patch @@username@@/@@cn@@ to the real username
	awk \\
		-v username="${__create_user_package_username}" \\
	'{
		gsub(/@@(cn|username)@@/, username, $0)
		print
	}
	' <"${__prepare_ccd_destdir:?}/config.ovpn" >"${__prepare_ccd_destdir:?}/config.ovpn.tmp" \\
	&& mv "${__prepare_ccd_destdir:?}/config.ovpn.tmp" "${__prepare_ccd_destdir:?}/config.ovpn"

	# copy user key pair

	__prepare_ccd_src_cert_file="${PKI_DIR:?}/certs/${__prepare_ccd_username:?}.crt"
	__prepare_ccd_dst_cert_name=$(awk '/^cert[ \\t]/ { sub(/^cert[ \\t]/, "", $0); print }' "${__prepare_ccd_destdir:?}/config.ovpn")

	if test -n "${__prepare_ccd_dst_cert_name-}"
	then
		if test -e "${__prepare_ccd_src_cert_file-}"
		then
			cp -L "${__prepare_ccd_src_cert_file:?}" "${__prepare_ccd_destdir:?}/${__prepare_ccd_dst_cert_name:?}"
		else
			:  # TODO: warn
		fi
	fi
	unset -v __prepare_ccd_src_cert_file __prepare_ccd_dst_cert_name

	__prepare_ccd_src_key_file="${PKI_DIR:?}/private/${__prepare_ccd_username:?}.key"
	__prepare_ccd_dst_key_name=$(awk '/^key[ \\t]/ { sub(/^key[ \\t]/, "", $0); print }' "${__prepare_ccd_destdir:?}/config.ovpn")

	if test -n "${__prepare_ccd_dst_key_name-}"
	then
		if test -e "${__prepare_ccd_src_key_file-}"
		then
			cp -L "${__prepare_ccd_src_key_file:?}" "${__prepare_ccd_destdir:?}/${__prepare_ccd_dst_key_name:?}"
		else
			:  # TODO: warn
		fi
	fi
	unset -v __prepare_ccd_src_key_file __prepare_ccd_dst_key_name

	unset -v __prepare_ccd_username __prepare_ccd_destdir
}

store_user_passphrase() {
	# usage: store_user_passphrase user passphrase

	__store_user_passphrase_user_package_dir=$(user_package_path "${1:?no username given}")

	if test -f "${__store_user_passphrase_user_package_dir:?}/password.txt.gpg"
	then
		mv "${__store_user_passphrase_user_package_dir:?}/password.txt.gpg" "${__store_user_passphrase_user_package_dir:?}/password.txt.old.gpg"
	fi
	if test -f "${__store_user_passphrase_user_package_dir:?}/password.txt"
	then
		mv "${__store_user_passphrase_user_package_dir:?}/password.txt" "${__store_user_passphrase_user_package_dir:?}/password.txt.old"
	fi

#ifbool USE_PGP
	if ${PGP_USER_IS_RECIPIENT:-true}
	then
		# TODO: first, get the user's PGP key, because without it we cannot
		#       store their credentials.
		# printf 'Fetching PGP key for %s…\n' "${email}"
		# gpg_fetch_key "${email}" || return %{EFAIL}

		gpg_encrypt "${email}" >"${user_package_dir:?}/password.txt.gpg"
	else
		gpg_encrypt >"${user_package_dir:?}/password.txt.gpg"
	fi <<-EOF || return %{EFAIL}
	${2-}
	EOF
#else
	cat >"${__store_user_passphrase_user_package_dir:?}/password.txt" <<-EOF || return %{EFAIL}
	${2-}
	EOF
#endif

	unset -v __store_user_passphrase_user_package_dir
}

create_user_package() {
	__create_user_package_username=${1:?}
	__create_user_package_email=${2:?}

	require_client_conf_d

	cert_file="${PKI_DIR:?}/certs/${__create_user_package_username:?}.crt"
	key_file="${PKI_DIR:?}/private/${__create_user_package_username:?}.key"

	__create_user_package_userdir=$(user_package_path "${__create_user_package_username:?}") || {
		ensure_package_dir
		mkdir "${__create_user_package_userdir:?}"
	}

	tmp_pkg=$(mktemp -d "${__create_user_package_userdir:?}/.tmp.XXXXXX") || {
		fail 'failed to create temp directory. certificate has been signed already'
	}

#ifbool USE_CONFIG_TBLK
	# create Tunnelblick OpenVPN configuration (for Mac OS X)
	# https://tunnelblick.net

	__create_user_package_tblk_resources="${tmp_pkg:?}/${CONFIG_NAME:-openvpn}.tblk/Contents/Resources"
	mkdir -p "${__create_user_package_tblk_resources:?}"

	prepare_client_config_dir "${__create_user_package_username}" "${__create_user_package_tblk_resources}"

	unset -v __create_user_package_tblk_resources

#endif
#if test "${USE_CONFIG_OVPN}" = dir
	# create plain OpenVPN configuration (directory format)

	__create_user_package_ovpn_confdir="${tmp_pkg:?}/${CONFIG_NAME:-openvpn}"
	mkdir -p "${__create_user_package_ovpn_confdir:?}"

	prepare_client_config_dir "${__create_user_package_username}" "${__create_user_package_ovpn_confdir}"

	unset -v __create_user_package_ovpn_confdir

#endif
#if test "${USE_CONFIG_OVPN}" = flat
	# create plain OpenVPN configuration (flat file including key, certificates)

	awk \\
		-v skel_dir="${CLIENT_CONFIG_SKEL:?}" \\
		-v cert_file="${cert_file}" \\
		-v key_file="${key_file}" \\
	'# inline configuration, available for the following openvpn options:
	# --ca, --cert, --dh, --extra-certs, --key, --pkcs12, --secret,
	# --crl-verify, --http-proxy-user-pass, --tls-auth, --auth-gen-token-secret,
	# --peer-fingerprint, --tls-crypt, --tls-crypt-v2 and --verify-hash

	# --peer-fingerprint, --verify-hash accept inline data which can be put as
	# is literally into config.ovpn, so it does not need to be processed here.

	# TODO: config lines should be split into components as is done by
	# https://github.com/OpenVPN/openvpn/blob/v2.6.4/src/openvpn/options.c#L4935

	function error(msg) {
		print msg | "cat >&2"
		close("cat >&2")
	}

	function inline_file(option, file,    _l) {
		printf "<%s>" ORS, option
		while (0 < (getline _l < file)) {
			print _l
		}
		close(file)
		printf "</%s>" ORS, option
	}

	{ opt = $1; sub(/^--/, "", opt) }

	# server only options
	"dh" == opt ||
	"extra-certs" == opt {
		error("option --" opt " is only supported in server mode, ignoring this line.")
		next
	}

	# client file options
	"ca" == opt ||
	"pkcs12" == opt ||
	"secret" == opt ||
	"auth-gen-token-secret" == opt {
		file = substr($0, index($0, opt) + length(opt) + 1)
		sub(/^[[:space:]]+/, "", file)
		sub(/[;#].*$/, "", file)

		inline_file(opt, skel_dir "/" file)
		next
	}

	# client specific files
	"cert" == opt {
		inline_file(opt, cert_file)
		next
	}
	"key" == opt {
		inline_file(opt, key_file)
		next
	}

	# TODO: --http-proxy-user-pass

	"crl-verify" == opt {
		if (/[[:space:]]dir$/) {
			error("option --" opt " with dir flag is not supported in flat files, ignoring this line.")
			next
		}

		file = substr($0, index($0, opt) + length(opt) + 1)
		sub(/^[[:space:]]+/, "", file)
		sub(/[;#].*$/, "", file)

		inline_file(opt, skel_dir "/" file)
	}

	"tls-auth" == opt ||
	"tls-crypt" == opt ||
	"tls-crypt-v2" == opt {
		file = substr($0, index($0, opt) + length(opt) + 1)
		sub(/^[[:space:]]+/, "", file)
		sub(/[;#].*$/, "", file)

		if ("tls-auth" == opt) {
			sub(/[[:space:]]+[0-9]+$/, "", file)
		}

		if ("tls-crypt-v2" == opt) {
			error("option --" opt " is not (yet) supported, ignoring this line.")
			next
		}

		inline_file(opt, skel_dir "/" file)

		if ("tls-auth" == opt && /[[:space:]][0-9]$/) {
			printf "key-direction %u" ORS, substr($0, length, 1)
		}
		next
	}

	{ print }
	' <"${CLIENT_CONFIG_SKEL:?}/config.ovpn" >"${tmp_pkg:?}/${CONFIG_NAME:-openvpn}.ovpn"

#endif
	#shellcheck disable=SC2035
	(cd "${tmp_pkg:?}" && tar -c *) \\
	>"${__create_user_package_userdir:?}/config.tar"

	rm -R -f "${tmp_pkg:?}"

	unset -v tmp_pkg __create_user_package_username __create_user_package_email
}

#ifbool USE_MAIL_CONFIG
require_command sendmail

mail_user_package() {
	__mail_user_package_username=${1:?}
	__mail_user_package_email=${2:?}

	__mail_user_package_userdir=$(user_package_path "${__mail_user_package_username:?}")

	test -d "${__mail_user_package_userdir:?}/maillog" \\
	|| mkdir "${__mail_user_package_userdir:?}/maillog"

	: "${EMAIL:?}"  # require sender email to be set

	if confirm 'Do you want to e-mail the VPN configuration to the user?' y
	then
		__mail_user_package_send=true
	else
		__mail_user_package_send=false
	fi

	{
		# header
		printf '%s: %s\\n' \\
			From "${EMAIL:?}" \\
			To "${__mail_user_package_email}" \\
			Subject 'VPN Configuration'

		# body
		mime_start_mail

		if test -e "${CONFDIR:?}/config-mail"
		then
			cat "${CONFDIR:?}/config-mail"
		else
			# default message
			cat <<-'EOF'
			Hello,

			please find attached the configuration files for your new personalised
			OpenVPN connection.

			Kind regards,

			the VPN administator.


			EOF
		fi

#ifbool USE_PGP_MAIL
		mime_attach_file \\
			"${__mail_user_package_package:?}/password.txt.gpg" \\
			text/plain attachment 'OpenVPN password file'
#endif

		mime_attach_file \\
			"${__mail_user_package_userdir:?}/config.tar" \\
			application/tar attachment 'OpenVPN configuration files'

		mime_terminate_mail
	} \\
#ifbool USE_PGP_MAIL
	| draft_pgp_mail \\
#else
	| draft_mail \\
#endif
	| {
		if ${__mail_user_package_send?}
		then
			tee "${__mail_user_package_userdir:?}/maillog/$(date +"${MAILLOG_DATE_FMT}").eml" \\
			| sendmail -t
		else
			test -d "${__mail_user_package_userdir:?}/maillog/unsent" \\
			| mkdir "${__mail_user_package_userdir:?}/maillog/unsent" \\

			cat >"${__mail_user_package_userdir:?}/maillog/unsent/$(date +"${MAILLOG_DATE_FMT}").eml"
			echo 'The e-mail was not send. Its content was stored in case you want to send it later:'
			echo "${__mail_user_package_userdir:?}/maillog/unsent/$(date +"${MAILLOG_DATE_FMT}").eml"
		fi
	}
}
#endif

#endif
