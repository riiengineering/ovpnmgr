#dnl -*- mode: shell-script; indent-tabs-mode: t -*-
#dnl
#dnl This module implements the renew command.
#dnl
#include pki.in
#include config-package.in
#ifbool USE_MAIL_CONFIG
#include mail.in
#endif

# renew command

MAX_RENEW_DAYS=14

cmd_renew_usage() {
	printf 'usage: %s renew USERNAME\\n' "$0"
}

cmd_renew() {
	case $#
	in
		(1)
			username=${1:?}
			;;
		(*)
			cmd_renew_usage >&2
			return %{EUSAGE}
			;;
	esac

	require_ovpn_conf

	user_package_dir=$(user_package_path "${username:?}")

	test -d "${user_package_dir:?}" || {
		fail 'no such user exists (did you mean to add-user?)'
	}
	test -s "${user_package_dir:?}/email" || {
		fail 'The e-mail of' "${username:-?}" 'is unknown. Aborting.'
	}

	cert="${PKI_DIR:?}/certs/${username:?}.crt"

	email=$(cat "${user_package_dir:?}/email")

	pki_cn_is_revoked "${username:?}" \\
	&& cn_revoked=true \\
	|| cn_revoked=false

	if test -f "${cert}" \\
		&& ! ${cn_revoked?} \\
		&& pki_check_cert_lifetime "${cert:?}" $((MAX_RENEW_DAYS))
	then
		fail 'The certificate for' "${username:?}" 'does not expire in the next' $((MAX_RENEW_DAYS)) 'days. Try again later.'
	fi

	rebuild_needed=false
	if ${cn_revoked?} \\
		&& confirm "The private key for user ${username?} is belongs to a revoked certificate. Should a new private key be generated?" y
	then
		rebuild_needed=true
	fi

	if ${rebuild_needed?}
	then
		# generate a new password for the new private key
		# TODO: merge code with cmd-add-user
		pass=$(gen_password) || fail 'password generation failed'

#ifbool USE_PGP
		if test -f "${user_package_dir:?}/password.txt.gpg"
		then
			mv "${user_package_dir:?}/password.txt.gpg" "${user_package_dir:?}/password.txt.old.gpg"
		fi

		# FIXME: need to receive public key first
		gpg_encrypt "${email}" >"${user_package_dir:?}/password.txt.gpg" <<-EOF || return %{EFAIL}
		${pass}
		EOF
#else
		if test -f "${user_package_dir:?}/password.txt"
		then
			mv "${user_package_dir:?}/password.txt" "${user_package_dir:?}/password.txt.old"
		fi

		cat >"${user_package_dir:?}/password.txt" <<-EOF || return %{EFAIL}
		${pass}
		EOF
#endif

		pki_rebuild "${username:?}" "${email:?}" "${pass:?}"
	else
		printf 'Renewing user certificate for %s...' "${username:?}"
		pki_resign_user_cert "${username:?}" || fail 're-signing certificate failed'
	fi

	# update user package
	create_user_package "${username:?}" "${email:?}" || return %{EFAIL}
#ifbool USE_MAIL_CONFIG

	# send email
	mail_user_package "${username:?}" "${email:?}" || {
		printf 'mailing user package failed. Please send the config tar ball to the user manually.' >&2
	}
#endif
}
