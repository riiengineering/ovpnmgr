#dnl -*- mode: shell-script; indent-tabs-mode: t -*-
#dnl
#dnl This module contains functions which are too small for a separate module
#dnl
#ifndef _HAVE_BASE_IN
#define _HAVE_BASE_IN
#include term.in

confirm() {
	# https://raw.githubusercontent.com/riiengineering/shfun/main/lib/interactive/confirm.sh
	printf '%s' "${1-Confirm?}"
	case $2
	in
		(y) printf ' [Y/n] ' ;;
		(n) printf ' [y/N] ' ;;
		(*)
			printf ' [y/n] '
			set -- "$1"  # unset default
			;;
	esac

	while :
	do
		read -r __confirm_resp
		case ${__confirm_resp:-"${2-}"}
		in
			([Yy]|[Yy][Ee][Ss])
				unset __confirm_resp
				return 0
				;;
			([Nn]|[Nn][Oo])
				unset __confirm_resp
				return 1
				;;
			(*)
				printf 'Please respond with "yes" or "no": ' ;;
		esac
	done
}

read_secure() {
	# usage: read_secure dest_var

	unset -v __read_err

	# disable echo if stdin is a TTY
	if test -t 0
	then
		term_noecho \\
		|| echo 'could not hide keyboard input. Password will be visible!'
	fi

	read -r "${1:?no destination variable given}" || __read_err=$?

	if test -t 0
	then
		echo
		term_echo || :
	fi

	return $((__read_err))
}

read_passphrase_confirm() {
	# usage: read_passphrase_confirm dest_var prompt

	__read_passphase_rc=%{EFAIL}

	# check parameters first
	: "${1:?no destination variable given}"

	# clear destination variable first, remove leftovers
	unset -v "${1:?}"

	while :
	do
		unset -v __read_password_x __read_password_y

		printf '%s' "${2:-Enter pass phrase: }"
		read_secure __read_passphrase_x
		printf '%s' 'Confirm: '
		read_secure __read_passphrase_y

		# Using case instead of test here because case is guaranteed to be a
		# built-in while test could be an executable leaking read passwords to
		# ps(1)

		# 1st step, check if password length is okay
		case ${__read_passphrase_x-}
		in
			('')
				printf 'No passphrase entered. Try again.\\n' >&2
				continue
				;;
			(????????*)
				# at least 8 characters were entered, ok.
				;;
			(*)
				# require at least 8 characters
				printf 'Passphrase is too short. Try again.\\n' >&2
				continue
				;;
		esac
		# then check if confirmation matches
		case ${__read_passphrase_x-}
		in
			("${__read_passphrase_y-}")
				# ok
				__read_passphase_rc=%{EOK}
				read -r "${1:?}" <<-EOF || { __read_passphase_rc=$?; unset -v "$1"; }
				${__read_passphrase_x}
				EOF

				unset -v __read_passphrase_x __read_passphrase_y
				break 2
				;;
			(*)
				printf 'Passphrases do not match. Try again.\\n' >&2
				continue
				;;
		esac
	done

	return $((__read_passphase_rc))
}

fail() {
	# usage: fail msg

	printf '%s\\n' "$*" >&2
	exit %{EFAIL}
}

PWD_CHARACTER_SET='[:alnum:].,/?!$%^&*()=+_-'

# shellcheck disable=SC2120
gen_password() {
	LC_ALL=C tr -d -c "${PWD_CHARACTER_SET}" </dev/random \\
	| dd bs=1 count="${1:-32}" 2>/dev/null
}

require_command() {
	command -v "${1:?}" >/dev/null 2>&1 || fail "$1: command not found"
}

check_bool() {
	case ${1-}
	in
		(true|false)
			return 0
			;;
		(*)
			return 1
			;;
	esac
}

date_iso8601_to_epoch() {
	# usage: date_iso8601_to_epoch iso8601_date
	# prints the ISO 8601 date string converted to epoch seconds.
	#
	# NOTE: this function only works with dates in UTC

	case $1
	in
		# 2023-06-25 08:37:26Z
		# 2023-06-25T08:37:26Z
		([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][\\ T][0-9][0-9]:[0-9][0-9]:[0-9][0-9]Z)
			# valid format
			;;
		(*)
			return %{EFAIL}
	esac

	(
		read -r Y m d H M S <<-EOD
		$(printf '%s\\n' "$1" | sed -e 's/^\\(....\\)-\\(..\\)-\\(..\\)[ T]\\(..\\):\\(..\\):\\(..\\)Z$/\\1 \\2 \\3 \\4 \\5 \\6/' -e 's/ 0/ /g')
		EOD

		# Inspiration:
		# https://www.etalabs.net/sh_tricks.html
		# https://astronomy.stackexchange.com/questions/2407/calculate-day-of-the-year-for-a-given-date

		_s=$(( (Y-1600)*365+((Y-1600)/4-(Y-1600)/100+(Y-1600)/400)-135140 ))

		_s=$(( _s + ((275*m/9)-(((m+9)/12)*(1+!(0==(Y%4)&&(0!=(Y%100)||0==(Y%400)))))+d-30) ))
		# HACK for leap years
		_s=$(( _s - (0==(Y%4)&&(0!=(Y%100)||0==(Y%400))) ))
		_s=$(( _s*86400 + ((H*60+M)*60+S) ))

		echo $((_s))
	)
}

#endif
